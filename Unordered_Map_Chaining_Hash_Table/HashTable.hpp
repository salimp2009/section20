#ifndef _MY_HASH_TABLE_H
#define _MY_HASH_TABLE_H

#include <vector>
#include <list>

class HashTable
{
    //maximum item we can store in the map; will be changed to a bigger number
    // and will need interface for user to determine
    static constexpr int table_size=10;
    
    // evey value will be stored as a pair; key & value
    // may use std::pair here as an alternative
    struct HashItem {
        int key;
        int value;
        HashItem(int k, int v): key{k}, value{v} { }
    };
    
    //  a single array index may store more items; we store in a list
    // when there is a collision which means the hash values for the keys generated by the hash function
    // returns same for different key then the the item will be placed in a list
    // another alternative is linear probing
    // when there are too many collisions and items being stored in the list
    // then map becomes inefficient and turns into linked list and the accessing or searching
    // increases from O(1) to O(N)
    std::vector<std::list<HashItem>>hashTable;

public:
        // basic no args constructor
        HashTable();
        
        //O(1) if the hash function is perfect
        // function that takes the key and returns a hashed value whcih becomes the array index no
        int get(int key);
        
        //O(1) if the hash function is perfect
        void put(int key, int value);
private:
    static std::size_t hash(int key);
};

#endif // _MY_HASH_TABLE_H
